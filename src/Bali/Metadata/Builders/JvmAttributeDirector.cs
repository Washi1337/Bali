using System;
using System.Collections.Generic;
using System.IO;
using Bali.IO;
using Bali.IO.Constants;
using Bali.SourceGeneration;

namespace Bali.Metadata.Builders
{
    /// <summary>
    /// Provides a default implementation of the <see cref="IJvmAttributeDirector"/> contract, with
    /// modularity in mind, so non-standard attributes can be processed.
    /// </summary>
    public sealed class JvmAttributeDirector : IJvmAttributeDirector
    {
        private readonly Stream _stream;
        private readonly ConstantPool _constantPool;
        private readonly Dictionary<string, IJvmAttributeBuilder> _builders;

        private static readonly DefaultJvmAttributeBuilder DefaultJvmAttributeBuilder = new();

        /// <summary>
        /// Creates a new <see cref="JvmAttributeDirector"/>.
        /// </summary>
        /// <param name="stream">The output <see cref="Stream"/> to write data to.</param>
        /// <param name="constantPool">The <see cref="ConstantPool"/> to resolve the name of attributes from.</param>
        public JvmAttributeDirector(Stream stream, in ConstantPool constantPool)
        {
            _stream = stream;
            _constantPool = constantPool;
            _builders = new Dictionary<string, IJvmAttributeBuilder>
            {
                ["Code"] = new CodeAttributeBuilder(this)
            };

            AutoGeneratedBuilders.AddToCache(this);
        }

        /// <inheritdoc />
        public IJvmAttributeBuilder this[string name]
        {
            get => _builders.TryGetValue(name, out var builder)
                ? builder
                : DefaultJvmAttributeBuilder;
            set
            {
                if (name != value.Name)
                    throw new ArgumentException(nameof(name));
                
                _builders[name] = value;
            }
        }

        /// <inheritdoc />
        public void ConstructAttribute(JvmAttribute attribute)
        {
            string name = GetName(attribute.NameIndex);
            var builder = this[name];
            
            builder.WriteName(_stream, attribute);
            ConstructBody(builder, attribute);
        }

        private void ConstructBody(IJvmAttributeBuilder builder, JvmAttribute attribute)
        {
            using var ms = new MemoryStream();
            builder.WriteBody(ms, attribute);
            
            _stream.WriteU4((uint) ms.Length);
            ms.WriteTo(_stream);
        }

        private string GetName(ushort nameIndex)
        {
            var constant = _constantPool[nameIndex];
            if (constant is not Utf8Constant { Value: { } name })
                throw new ArgumentException(nameof(nameIndex));
            
            return name;
        }
    }
}