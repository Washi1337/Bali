using System;
using System.Collections.Generic;
using System.IO;
using Bali.Constants;
using Bali.IO;
using Bali.SourceGeneration;

namespace Bali.Attributes.Readers
{
    /// <summary>
    /// Provides a basic implementation of the <see cref="IJvmAttributeReaderFacade"/> contract with
    /// modularity in mind, so custom non-standard attributes can be processed if needed.
    /// </summary>
    public class JvmAttributeReaderFacade : IJvmAttributeReaderFacade
    {
        private readonly Stream _stream;
        private readonly ConstantPool _constantPool;
        private readonly Dictionary<string, IJvmAttributeReader> _concreteFactories;

        private static readonly DefaultJvmAttributeReader DefaultJvmAttributeReader = new();

        /// <summary>
        /// Creates a new <see cref="JvmAttributeReaderFacade"/>.
        /// </summary>
        /// <param name="stream">The input <see cref="Stream"/> to read data from.</param>
        /// <param name="constantPool">The <see cref="ConstantPool"/>.</param>
        public JvmAttributeReaderFacade(Stream stream, in ConstantPool constantPool)
        {
            _stream = stream;
            _constantPool = constantPool;
            _concreteFactories = new Dictionary<string, IJvmAttributeReader>
            {
                ["Code"] = new CodeAttributeReader(this)
            };
            
            AutoGeneratedReaders.AddToCache(this);
        }

        /// <inheritdoc />
        public IJvmAttributeReader this[string name]
        {
            get => _concreteFactories.TryGetValue(name, out var value)
                ? value
                : DefaultJvmAttributeReader;
            set
            {
                if (name != value.Name)
                    throw new ArgumentException(nameof(name));
                
                _concreteFactories[name] = value;
            }
        }

        /// <inheritdoc />
        public JvmAttribute ReadAttribute()
        {
            ushort nameIndex = _stream.ReadU2();
            string name = GetName(nameIndex);

            return this[name].Read(_stream, nameIndex);
        }

        private string GetName(ushort nameIndex)
        {
            var constant = _constantPool[nameIndex];
            if (constant is not Utf8Constant { Value: { } name })
                throw new ArgumentException(nameof(nameIndex));

            return name;
        }
    }
}